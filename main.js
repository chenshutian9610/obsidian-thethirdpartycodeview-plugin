/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TheThirdPartyCodeViewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var VIEW_TYPE_THE_THIRD_PARTY_CODE = "the-third-party-code-view";
var EXT_TYPE_THE_THIRD_PARTY_CODE = [
  "txt",
  "http",
  "conf",
  "uml",
  "java",
  "cpp",
  "c",
  "cc",
  "h",
  "hpp",
  "cs",
  "vb",
  "fs",
  "py",
  "pl",
  "pm",
  "rb",
  "js",
  "ts",
  "html",
  "css",
  "php",
  "phtml",
  "aspx",
  "asax",
  "asm",
  "sh",
  "bat",
  "ps1",
  "sql",
  "xml",
  "json",
  "yml",
  "yaml",
  "toml",
  "ini",
  "properties",
  "go",
  "scala",
  "kt",
  "dart",
  "swift",
  "objc",
  "javafx",
  "lua",
  "r",
  "rs",
  "erl",
  "ex",
  "clj",
  "cljs",
  "jl",
  "sass",
  "less",
  "styl",
  "pug",
  "ejs",
  "mustache",
  "handlebars",
  "hbs",
  "twig",
  "coffee",
  "elm",
  "nim",
  "groovy",
  "vbscript",
  "vbs",
  "awk",
  "tex",
  "hx",
  "ml",
  "re",
  "ml",
  "m",
  "idr",
  "lidr",
  "v",
  "sv",
  "tcl",
  "liquid"
];
var TheThirdPartyCodeViewPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerView(
      VIEW_TYPE_THE_THIRD_PARTY_CODE,
      (leaf) => new TheThirdPartyCodeView(leaf)
    );
    this.registerExtensions(
      EXT_TYPE_THE_THIRD_PARTY_CODE,
      VIEW_TYPE_THE_THIRD_PARTY_CODE
    );
  }
  async onunload() {
  }
};
var TheThirdPartyCodeView = class extends import_obsidian.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_THE_THIRD_PARTY_CODE;
  }
  /** 获取文件标题 */
  getDisplayText() {
    var _a;
    return ((_a = this.file) == null ? void 0 : _a.name) + " (readonly)";
  }
  /** 获取文件内容，用于回写到原文件 */
  getViewData() {
    return this.data;
  }
  /** 渲染 */
  setViewData(data, clear) {
    if (this.data.length > 100 * 1024) {
      this.renderTextFormat();
    } else {
      this.renderMarkdownFormat();
    }
    global.exampleview = this;
    global.MarkdownRenderer = import_obsidian.MarkdownRenderer;
  }
  /** 文本格式 */
  renderTextFormat() {
    var _a, _b;
    console.log("renderTextFormat", (_a = this.file) == null ? void 0 : _a.name);
    const container = (_b = this == null ? void 0 : this.containerEl) == null ? void 0 : _b.children[1];
    container.empty();
    container.createEl("pre", { text: this.data });
  }
  /** markdown 格式 */
  renderMarkdownFormat() {
    var _a, _b, _c, _d;
    console.log("renderMarkdownFormat", (_a = this.file) == null ? void 0 : _a.name);
    const container = (_b = this == null ? void 0 : this.containerEl) == null ? void 0 : _b.children[1];
    container.empty();
    import_obsidian.MarkdownRenderer.render(
      this.app,
      "```" + ((_c = this.file) == null ? void 0 : _c.extension) + "\n" + this.data + "\n```",
      container,
      (_d = this == null ? void 0 : this.file) == null ? void 0 : _d.path,
      this
    ).catch((reason) => {
      this.renderTextFormat();
      console.error("renderMarkdown", reason);
    });
  }
  clear() {
    console.warn("clear");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcbiAgV29ya3NwYWNlTGVhZixcbiAgUGx1Z2luLFxuICBUZXh0RmlsZVZpZXcsXG4gIE1hcmtkb3duUmVuZGVyZXIsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5jb25zdCBWSUVXX1RZUEVfVEhFX1RISVJEX1BBUlRZX0NPREUgPSBcInRoZS10aGlyZC1wYXJ0eS1jb2RlLXZpZXdcIjtcbmNvbnN0IEVYVF9UWVBFX1RIRV9USElSRF9QQVJUWV9DT0RFID0gW1xuICBcInR4dFwiLFxuICBcImh0dHBcIixcbiAgXCJjb25mXCIsXG4gIFwidW1sXCIsXG4gIFwiamF2YVwiLFxuICBcImNwcFwiLFxuICBcImNcIixcbiAgXCJjY1wiLFxuICBcImhcIixcbiAgXCJocHBcIixcbiAgXCJjc1wiLFxuICBcInZiXCIsXG4gIFwiZnNcIixcbiAgXCJweVwiLFxuICBcInBsXCIsXG4gIFwicG1cIixcbiAgXCJyYlwiLFxuICBcImpzXCIsXG4gIFwidHNcIixcbiAgXCJodG1sXCIsXG4gIFwiY3NzXCIsXG4gIFwicGhwXCIsXG4gIFwicGh0bWxcIixcbiAgXCJhc3B4XCIsXG4gIFwiYXNheFwiLFxuICBcImFzbVwiLFxuICBcInNoXCIsXG4gIFwiYmF0XCIsXG4gIFwicHMxXCIsXG4gIFwic3FsXCIsXG4gIFwieG1sXCIsXG4gIFwianNvblwiLFxuICBcInltbFwiLFxuICBcInlhbWxcIixcbiAgXCJ0b21sXCIsXG4gIFwiaW5pXCIsXG4gIFwicHJvcGVydGllc1wiLFxuICBcImdvXCIsXG4gIFwic2NhbGFcIixcbiAgXCJrdFwiLFxuICBcImRhcnRcIixcbiAgXCJzd2lmdFwiLFxuICBcIm9iamNcIixcbiAgXCJqYXZhZnhcIixcbiAgXCJsdWFcIixcbiAgXCJyXCIsXG4gIFwicnNcIixcbiAgXCJlcmxcIixcbiAgXCJleFwiLFxuICBcImNsalwiLFxuICBcImNsanNcIixcbiAgXCJqbFwiLFxuICBcInNhc3NcIixcbiAgXCJsZXNzXCIsXG4gIFwic3R5bFwiLFxuICBcInB1Z1wiLFxuICBcImVqc1wiLFxuICBcIm11c3RhY2hlXCIsXG4gIFwiaGFuZGxlYmFyc1wiLFxuICBcImhic1wiLFxuICBcInR3aWdcIixcbiAgXCJjb2ZmZWVcIixcbiAgXCJlbG1cIixcbiAgXCJuaW1cIixcbiAgXCJncm9vdnlcIixcbiAgXCJ2YnNjcmlwdFwiLFxuICBcInZic1wiLFxuICBcImF3a1wiLFxuICBcInRleFwiLFxuICBcImh4XCIsXG4gIFwibWxcIixcbiAgXCJyZVwiLFxuICBcIm1sXCIsXG4gIFwibVwiLFxuICBcImlkclwiLFxuICBcImxpZHJcIixcbiAgXCJ2XCIsXG4gIFwic3ZcIixcbiAgXCJ0Y2xcIixcbiAgXCJsaXF1aWRcIixcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRoZVRoaXJkUGFydHlDb2RlVmlld1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAvLyBcdTZDRThcdTUxOENcdTg5QzZcdTU2RkVcbiAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgIFZJRVdfVFlQRV9USEVfVEhJUkRfUEFSVFlfQ09ERSxcbiAgICAgIChsZWFmKSA9PiBuZXcgVGhlVGhpcmRQYXJ0eUNvZGVWaWV3KGxlYWYpXG4gICAgKTtcbiAgICAvLyBcdTYyNjlcdTVDNTVcdTU0MERcdTUxNzNcdTgwNTRcdTg5QzZcdTU2RkVcbiAgICB0aGlzLnJlZ2lzdGVyRXh0ZW5zaW9ucyhcbiAgICAgIEVYVF9UWVBFX1RIRV9USElSRF9QQVJUWV9DT0RFLFxuICAgICAgVklFV19UWVBFX1RIRV9USElSRF9QQVJUWV9DT0RFXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG9udW5sb2FkKCkge31cbn1cblxuY2xhc3MgVGhlVGhpcmRQYXJ0eUNvZGVWaWV3IGV4dGVuZHMgVGV4dEZpbGVWaWV3IHtcbiAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZikge1xuICAgIHN1cGVyKGxlYWYpO1xuICB9XG5cbiAgZ2V0Vmlld1R5cGUoKSB7XG4gICAgcmV0dXJuIFZJRVdfVFlQRV9USEVfVEhJUkRfUEFSVFlfQ09ERTtcbiAgfVxuXG4gIC8qKiBcdTgzQjdcdTUzRDZcdTY1ODdcdTRFRjZcdTY4MDdcdTk4OTggKi9cbiAgZ2V0RGlzcGxheVRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZT8ubmFtZSArIFwiIChyZWFkb25seSlcIjtcbiAgfVxuXG4gIC8qKiBcdTgzQjdcdTUzRDZcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdUZGMENcdTc1MjhcdTRFOEVcdTU2REVcdTUxOTlcdTUyMzBcdTUzOUZcdTY1ODdcdTRFRjYgKi9cbiAgZ2V0Vmlld0RhdGEoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG5cbiAgLyoqIFx1NkUzMlx1NjdEMyAqL1xuICBzZXRWaWV3RGF0YShkYXRhOiBzdHJpbmcsIGNsZWFyOiBib29sZWFuKTogdm9pZCB7XG4gICAgLy8gXHU4RDg1XHU4RkM3IDEwMEtCIFx1NzY4NFx1NEUwRFx1NkUzMlx1NjdEM1x1RkYwQ1x1NEYxQVx1NTM2MVx1NkI3QlxuICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gMTAwICogMTAyNCkge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0Rm9ybWF0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyTWFya2Rvd25Gb3JtYXQoKTtcbiAgICB9XG4gICAgLy8gXHU4QzAzXHU4QkQ1XHU0RUUzXHU3ODAxXG4gICAgZ2xvYmFsLmV4YW1wbGV2aWV3ID0gdGhpcztcbiAgICBnbG9iYWwuTWFya2Rvd25SZW5kZXJlciA9IE1hcmtkb3duUmVuZGVyZXI7XG4gIH1cblxuICAvKiogXHU2NTg3XHU2NzJDXHU2ODNDXHU1RjBGICovXG4gIHJlbmRlclRleHRGb3JtYXQoKSB7XG4gICAgY29uc29sZS5sb2coXCJyZW5kZXJUZXh0Rm9ybWF0XCIsIHRoaXMuZmlsZT8ubmFtZSk7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcz8uY29udGFpbmVyRWw/LmNoaWxkcmVuWzFdO1xuICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuICAgIGNvbnRhaW5lci5jcmVhdGVFbChcInByZVwiLCB7IHRleHQ6IHRoaXMuZGF0YSB9KTtcbiAgfVxuXG4gIC8qKiBtYXJrZG93biBcdTY4M0NcdTVGMEYgKi9cbiAgcmVuZGVyTWFya2Rvd25Gb3JtYXQoKSB7XG4gICAgY29uc29sZS5sb2coXCJyZW5kZXJNYXJrZG93bkZvcm1hdFwiLCB0aGlzLmZpbGU/Lm5hbWUpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXM/LmNvbnRhaW5lckVsPy5jaGlsZHJlblsxXTtcbiAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcbiAgICAgIHRoaXMuYXBwLFxuICAgICAgXCJgYGBcIiArIHRoaXMuZmlsZT8uZXh0ZW5zaW9uICsgXCJcXG5cIiArIHRoaXMuZGF0YSArIFwiXFxuYGBgXCIsXG4gICAgICBjb250YWluZXIsXG4gICAgICB0aGlzPy5maWxlPy5wYXRoLFxuICAgICAgdGhpc1xuICAgICkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0Rm9ybWF0KCk7XG4gICAgICBjb25zb2xlLmVycm9yKFwicmVuZGVyTWFya2Rvd25cIiwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIGNvbnNvbGUud2FybihcImNsZWFyXCIpO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBS087QUFFUCxJQUFNLGlDQUFpQztBQUN2QyxJQUFNLGdDQUFnQztBQUFBLEVBQ3BDO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGO0FBRUEsSUFBcUIsOEJBQXJCLGNBQXlELHVCQUFPO0FBQUEsRUFDOUQsTUFBTSxTQUFTO0FBRWIsU0FBSztBQUFBLE1BQ0g7QUFBQSxNQUNBLENBQUMsU0FBUyxJQUFJLHNCQUFzQixJQUFJO0FBQUEsSUFDMUM7QUFFQSxTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxXQUFXO0FBQUEsRUFBQztBQUNwQjtBQUVBLElBQU0sd0JBQU4sY0FBb0MsNkJBQWE7QUFBQSxFQUMvQyxZQUFZLE1BQXFCO0FBQy9CLFVBQU0sSUFBSTtBQUFBLEVBQ1o7QUFBQSxFQUVBLGNBQWM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQUFBO0FBQUEsRUFHQSxpQkFBaUI7QUF0SG5CO0FBdUhJLGFBQU8sVUFBSyxTQUFMLG1CQUFXLFFBQU87QUFBQSxFQUMzQjtBQUFBO0FBQUEsRUFHQSxjQUFzQjtBQUNwQixXQUFPLEtBQUs7QUFBQSxFQUNkO0FBQUE7QUFBQSxFQUdBLFlBQVksTUFBYyxPQUFzQjtBQUU5QyxRQUFJLEtBQUssS0FBSyxTQUFTLE1BQU0sTUFBTTtBQUNqQyxXQUFLLGlCQUFpQjtBQUFBLElBQ3hCLE9BQU87QUFDTCxXQUFLLHFCQUFxQjtBQUFBLElBQzVCO0FBRUEsV0FBTyxjQUFjO0FBQ3JCLFdBQU8sbUJBQW1CO0FBQUEsRUFDNUI7QUFBQTtBQUFBLEVBR0EsbUJBQW1CO0FBN0lyQjtBQThJSSxZQUFRLElBQUkscUJBQW9CLFVBQUssU0FBTCxtQkFBVyxJQUFJO0FBQy9DLFVBQU0sYUFBWSxrQ0FBTSxnQkFBTixtQkFBbUIsU0FBUztBQUM5QyxjQUFVLE1BQU07QUFDaEIsY0FBVSxTQUFTLE9BQU8sRUFBRSxNQUFNLEtBQUssS0FBSyxDQUFDO0FBQUEsRUFDL0M7QUFBQTtBQUFBLEVBR0EsdUJBQXVCO0FBckp6QjtBQXNKSSxZQUFRLElBQUkseUJBQXdCLFVBQUssU0FBTCxtQkFBVyxJQUFJO0FBQ25ELFVBQU0sYUFBWSxrQ0FBTSxnQkFBTixtQkFBbUIsU0FBUztBQUM5QyxjQUFVLE1BQU07QUFDaEIscUNBQWlCO0FBQUEsTUFDZixLQUFLO0FBQUEsTUFDTCxVQUFRLFVBQUssU0FBTCxtQkFBVyxhQUFZLE9BQU8sS0FBSyxPQUFPO0FBQUEsTUFDbEQ7QUFBQSxPQUNBLGtDQUFNLFNBQU4sbUJBQVk7QUFBQSxNQUNaO0FBQUEsSUFDRixFQUFFLE1BQU0sQ0FBQyxXQUFXO0FBQ2xCLFdBQUssaUJBQWlCO0FBQ3RCLGNBQVEsTUFBTSxrQkFBa0IsTUFBTTtBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxRQUFjO0FBQ1osWUFBUSxLQUFLLE9BQU87QUFBQSxFQUN0QjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
